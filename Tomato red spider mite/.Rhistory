lddprob = LDDprob, lddrate = LDDrate,k_is_0 = K_is_0, nodeK = NodeK,propaguleestablishment = PropaguleEstablishment,
nodespreadreduction = NodeSpreadReduction,managing = Managing)
}
###Update info vector for any info spread (if SEAM supplied)
###Note once nodes obtain info they always have info (only zero values updated)
if(is.matrix(SEAM) == T)
{
RandSEAM[] <- rbinom(n=nrow(SDDprob)^2, size=1, prob = SEAM*Detected)
InfoTransferred = ifelse(colSums(RandSEAM)>0,1,0)
HaveInfo[HaveInfo == 0] = InfoTransferred[HaveInfo == 0]
}
###Add invasion resulting from colonisation from external sources
if(OngoingExternal == T)
{
if(is.matrix(InvasionRisk) == F)
ExternalInvasion = rbinom(1:nrow(SDDprob),size = 1,prob = InvasionRisk)
if(is.matrix(InvasionRisk) == T)
ExternalInvasion = rbinom(1:nrow(SDDprob),size = 1,prob = InvasionRisk[,timestep])
Invaded[Invaded == 0] = ExternalInvasion[Invaded==0]
if(is.na(IncursionStartPop) == T)
N = N+ExternalInvasion
if(is.na(IncursionStartPop) == F)
N = N+ExternalInvasion*IncursionStartPop
N[N > NodeK] = NodeK[N > NodeK]
}
###Update infestation vector
Invaded = ifelse(N>0,1,0)
###Record nodes adopting management
ManagingResultsLoop[,timestep] = Managing
###Record infested nodes
InvasionResultsLoop[,timestep] = Invaded
###Record populations
PopulationResultsLoop[,timestep] = N
###Select new nodes where infestation detected
NewHaveInfo =  rbinom(1:nrow(SDDprob),size = 1,prob = Invaded*NodeDetectionProb)
###Add newly detected infestations to info vector
###Note once nodes obtain info they always have info (only zero values updated)
HaveInfo[HaveInfo==0] = NewHaveInfo[HaveInfo==0]
###Record detection status
DetectedResultsLoop[,timestep] = HaveInfo*Invaded
}
abind(InvasionResults,PopulationResults,ManagingResultsLoop,DetectedResultsLoop,along = 3)
}
stopCluster(cluster)
############################################################
############################################################
###Call core function
############################################################
############################################################
source("INApestMetaParallel.r")
source("INApestMeta.r")
Nperm = 3
Ntimesteps = 10
AnnualIncursionRate = 0.1
H_vectors <- pmin(1, human_prop * d$humans)
DetectionProbs = c(0,0.5)
#for(detprob in 1:length(DetectionProbs))
#{
detprob = 1
ModelName = paste0("StandardCurrentClim_DetProb_Parallel",DetectionProbs[detprob])
if(DoClimateChange == TRUE)
ModelName = paste0("StandardFutureClim_DetProb_Parallel",DetectionProbs[detprob])
Start <- Sys.time()
INApestMetaParallel(
ModelName = ModelName,
Nperm = Nperm,                  #Number of permutations per parameter combination
Ntimesteps = Ntimesteps,                 #Simulation duration
DetectionProb = DetectionProbs[detprob],  #Annual detection probability or vector of probabilties per node (e.g. farm) (must be between 0 and 1)
ManageProb = 0.99,             #Annual Probability or vector of probabilities vector length nrow(SDDprob)of node adopting management upon detection
MortalityProb = 0.99,           #Annual mortality probability under management
SpreadReduction = 0.9,        #Reduction in dispersal probability when management adopted. Must be between 0 (no spread reduction) and 1 (complete prevention of spread). Can be single value or vector length nrow(SDDprob)
InitialPopulation = d$N0,        #Population size at start if simulations
InitBioP = NA,		#Proportion of nodes infested at start of simulations
InvasionRisk = PropTotalHumans*AnnualIncursionRate,  #Vector of probabilities of external invasion risk
R0 = d$R0,                    #Intrinsic rate of increase
K = K,		       #Population carrying capacity
PropaguleProduction = alpha, #Propagules produced per individual
PropaguleEstablishment = estab, #Propagules establishment rate
IncursionStartPop=10,      #option to set population size for new incursions
SDDprob = nd,                   #Natural disperal probability between each pair of nodes
SEAM = 0,			#Option to provide socioeconomic adjacency matrix for information spread
LDDprob = hd,         #Option to provide long distance (human-mediated) dispersal matrix instead of distance-independent dispesal rate
#e.g. could be weighted by law of human visitation or data on stock movements
LDDrate = H_vectors,         #Proportion of available propagules entering LDD
OngoingExternal = F,   ##Option to include ongoing invasion from external sources
OutputDir = ResultsDir,		      #Directory for storing results
DoPlots = TRUE	     #Option to omit printing of line graphs.Default is to print.
)
End <- Sys.time()
ParallelTime <- End-Start
ParallelTime
InvasionResults
PermOut
DetectedResultsLoop
LocalDynamicsLoop = function(sddprob = SDDprob, propaguleproduction = PropaguleProduction,nodeR0 = NodeR0,n=N,
lddprob = LDDprob, lddrate = LDDrate,k_is_0 = K_is_0, nodeK = NodeK,propaguleestablishment = PropaguleEstablishment,
nodespreadreduction = NodeSpreadReduction,managing = Managing)
{
Propagules <- rpois(nrow(sddprob), propaguleproduction * nodeR0 * n)# propagules are produced
###self-mediated spread
Pout <- Propagules*(1-lddrate)
if(sum(Pout)>0 )
Pin <- t(rmultinom(1, size=sum(Pout*rowSums(sddprob)), prob=Pout %*% sddprob))  # propagules are dispersed
###human-mediated spread
if (is.matrix(lddprob)==T)
{
Qout  = Propagules*lddrate *(1-nodespreadreduction*managing)
if(sum(Qout)>0)
Qin <- t(rmultinom(1, size=sum(Qout*rowSums(lddprob)), prob=Qout %*% lddprob))    # propagules are dispersed
}
# propagule success depends on availability of uninfested host plants
Nout <- ifelse(k_is_0, 0, n + rbinom(nrow(sddprob), nodeK-n, 1 - exp(-propaguleestablishment*(Pin+Qin))))
return(Nout)
}
InvasionResultsLoop <- array(dim = c(nrow(SDDprob),Ntimesteps))
PopulationResultsLoop <- InvasionResultsLoop
ManagingResultsLoop <- InvasionResultsLoop
DetectedResultsLoop <- InvasionResultsLoop
###Assign initial infestations according either to "InitialInvasion" binary vector OR
###"InvasionRisk" probabilities and/or initial proportion of nodes infested ("InitBioP") OR
###just "InitBioP" if neither "InitialInvasion" or "InvasionRisk" supplied by user
InitBio = rep(0,times = nrow(SDDprob))
if(length(InitialPopulation) != nrow(SDDprob))
{
if(length(InvasionRisk) == nrow(SDDprob))
{
if(is.na(InitBioP) == F)
Infested = sample(1:nrow(SDDprob),size = ceiling(nrow(SDDprob)*InitBioP),prob = InvasionRisk)
if(is.na(InitBioP) == T)
{
Infested = rbinom(1:nrow(SDDprob),size = 1,prob = InvasionRisk)
Infested = which(Infested == 1)
}
}
if(length(InvasionRisk) != nrow(SDDprob))
{
if(is.matrix(InvasionRisk) == F)
Infested = sample(1:nrow(SDDprob),size = ceiling(nrow(SDDprob)*InitBioP))
if(is.matrix(InvasionRisk) == T)
{
Infested = rbinom(1:nrow(SDDprob),size = 1,prob = InvasionRisk[,1])
Infested = which(Infested == 1)
}
}
if(is.na(IncursionStartPop) == T)
InitBio[Infested] = 1
if(is.na(IncursionStartPop) == F)
InitBio[Infested] = IncursionStartPop
}
if(length(InitialPopulation) == nrow(SDDprob))
InitBio = InitialPopulation
###Randomly assign annual detection probability, based on mean and sd
###If DetectionProb given as single value or vector (nodes)
if(is.matrix(DetectionProb)==FALSE &&(length(DetectionProb) == 1 ||length(DetectionProb) == nrow(SDDprob) ))
{
NodeDetectionProb = rnorm(DetectionProb,DetectionSD,n = nrow(SDDprob))
NodeDetectionProb[NodeDetectionProb<0] = 0
NodeDetectionProb[NodeDetectionProb>1] = 1
}
###If DetectionProb given as matrix (nodes x timesteps) use values for first timestep to get initial detections
if(is.matrix(DetectionProb)==TRUE && nrow(DetectionProb) == nrow(SDDprob) && ncol(DetectionProb) == Ntimesteps)
{
NodeDetectionProb = rnorm(DetectionProb[,timestep],DetectionSD,n = nrow(SDDprob))
NodeDetectionProb[NodeDetectionProb<0] = 0
NodeDetectionProb[NodeDetectionProb>1] = 1
}
###Randomly assign probability of mangement adoption upon detection of infestation
###If ManageProb given as single value or vector (nodes)
if(is.matrix(ManageProb)==FALSE &&(length(ManageProb) == 1 ||length(ManageProb) == nrow(SDDprob) ))
{
NodeManageProb = rnorm(ManageProb,ManageSD,n = nrow(SDDprob))
NodeManageProb[NodeManageProb<0] = 0
NodeManageProb[NodeManageProb>1] = 1
}
###Randomly assign spread reduction factor when management adopted
###If SpreadReduction given as single value or vector (nodes)
if(is.matrix(SpreadReduction)==FALSE &&(length(SpreadReduction) == 1 ||length(SpreadReduction) == nrow(SDDprob) ))
{
NodeSpreadReduction = rnorm(SpreadReduction,ManageSD,n = nrow(SDDprob))
NodeSpreadReduction[NodeSpreadReduction<0] = 0
NodeSpreadReduction[NodeSpreadReduction>1] = 1
}
###Randomly assign mortality probability when management applied
###If MortalityProb given as single value or vector (nodes)
if(is.matrix(MortalityProb)==FALSE &&(length(MortalityProb) == 1 ||length(MortalityProb) == nrow(SDDprob) ))
{
NodeEradicationProb = rnorm(MortalityProb,MortalitySD,n = nrow(SDDprob))
NodeEradicationProb[NodeEradicationProb<0] = 0
NodeEradicationProb[NodeEradicationProb>1] = 1
}
###Populate invasion status vector ahead of timestep loop
Invaded = ifelse(InitBio>0,1,0)
###Probability of info at start of simulation depends on
###Presence of pest and detection probability
###Select nodes that have detected infestation
InitInfo = rbinom(1:nrow(SDDprob),size = 1,prob = Invaded*NodeDetectionProb)
###Populate information status vector ahead of timestep loop
HaveInfo = InitInfo
# initialise the population
N <- InitBio
# run simulation
for (timestep in 1:Ntimesteps) {
###If carrying capacity provided as matrix assign values for relevant timestep
if(is.matrix(K) == TRUE)
{
K_is_0 <- K[,timestep]<=0
inv_K <- 1 / sum(K[,timestep])
NodeK = K[,timestep]
}
###If rate of increase provided as matrix assign values for relevant timestep
if(is.matrix(R0) == TRUE)
NodeR0 = R0[,timestep]
###Randomly assign annual detection probability, based on mean and sd
###If DetectionProb given as matrix (nodes x timesteps)
if(is.matrix(DetectionProb)==TRUE && nrow(DetectionProb) == nrow(SDDprob) && ncol(DetectionProb) == Ntimesteps)
{
NodeDetectionProb = rnorm(DetectionProb[,timestep],DetectionSD,n = nrow(SDDprob))
NodeDetectionProb[NodeDetectionProb<0] = 0
NodeDetectionProb[NodeDetectionProb>1] = 1
}
###Randomly assign probability of mangement adoption upon detection of infestation
###If ManageProb given as matrix (nodes x timesteps)
if(is.matrix(ManageProb)==TRUE && nrow(ManageProb) == nrow(SDDprob) && ncol(ManageProb) == Ntimesteps)
{
NodeManageProb = rnorm(ManageProb[,timestep],ManageSD,n = nrow(SDDprob))
NodeManageProb[NodeManageProb<0] = 0
NodeManageProb[NodeManageProb>1] = 1
}
###Randomly assign spread reduction factor when management adopted
###If SpreadReduction given as matrix (nodes x timesteps)
if(is.matrix(SpreadReduction)==TRUE && nrow(SpreadReduction) == nrow(SDDprob) && ncol(SpreadReduction) == Ntimesteps)
{
NodeSpreadReduction = rnorm(SpreadReduction[,timestep],ManageSD,n = nrow(SDDprob))
NodeSpreadReduction[NodeSpreadReduction<0] = 0
NodeSpreadReduction[NodeSpreadReduction>1] = 1
}
###Randomly assign annual eradication probability when management applied
###If MortalityProb given as matrix (nodes x timesteps)
if(is.matrix(MortalityProb)==TRUE && nrow(MortalityProb) == nrow(SDDprob) && ncol(MortalityProb) == Ntimesteps)
{
NodeMortalityProb = rnorm(MortalityProb[,timestep],MortalitySD,n = nrow(SDDprob))
NodeMortalityProb[NodeMortalityProb<0] = 0
NodeMortalityProb[NodeMortalityProb>1] = 1
}
###Assign management status to nodes
###Management is only applied to nodes which have information
###i.e. where pest has been detected or following communication of information
###from neighbouring infested farms
Managing = rbinom(1:nrow(SDDprob),size = 1,prob = NodeManageProb*HaveInfo)
###Management is only applied to nodes which have information
###i.e. where pest has been detected or following communication of information
###from neighbouring infested farms
Managing = Managing*HaveInfo
###Identify nodes with known extant infestations
Detected = Invaded*HaveInfo
N0 = rbinom(nrow(SDDprob),N,(1-MortalityProb*Managing))
Pin <-0
Qin <- 0
# natural dispersal
if(sum(N0)>0 )
{
N <- LocalDynamicsLoop(sddprob = SDDprob, propaguleproduction = PropaguleProduction,nodeR0 = NodeR0,n=N0,
lddprob = LDDprob, lddrate = LDDrate,k_is_0 = K_is_0, nodeK = NodeK,propaguleestablishment = PropaguleEstablishment,
nodespreadreduction = NodeSpreadReduction,managing = Managing)
}
###Update info vector for any info spread (if SEAM supplied)
###Note once nodes obtain info they always have info (only zero values updated)
if(is.matrix(SEAM) == T)
{
RandSEAM[] <- rbinom(n=nrow(SDDprob)^2, size=1, prob = SEAM*Detected)
InfoTransferred = ifelse(colSums(RandSEAM)>0,1,0)
HaveInfo[HaveInfo == 0] = InfoTransferred[HaveInfo == 0]
}
###Add invasion resulting from colonisation from external sources
if(OngoingExternal == T)
{
if(is.matrix(InvasionRisk) == F)
ExternalInvasion = rbinom(1:nrow(SDDprob),size = 1,prob = InvasionRisk)
if(is.matrix(InvasionRisk) == T)
ExternalInvasion = rbinom(1:nrow(SDDprob),size = 1,prob = InvasionRisk[,timestep])
Invaded[Invaded == 0] = ExternalInvasion[Invaded==0]
if(is.na(IncursionStartPop) == T)
N = N+ExternalInvasion
if(is.na(IncursionStartPop) == F)
N = N+ExternalInvasion*IncursionStartPop
N[N > NodeK] = NodeK[N > NodeK]
}
###Update infestation vector
Invaded = ifelse(N>0,1,0)
###Record nodes adopting management
ManagingResultsLoop[,timestep] = Managing
###Record infested nodes
InvasionResultsLoop[,timestep] = Invaded
###Record populations
PopulationResultsLoop[,timestep] = N
###Select new nodes where infestation detected
NewHaveInfo =  rbinom(1:nrow(SDDprob),size = 1,prob = Invaded*NodeDetectionProb)
###Add newly detected infestations to info vector
###Note once nodes obtain info they always have info (only zero values updated)
HaveInfo[HaveInfo==0] = NewHaveInfo[HaveInfo==0]
###Record detection status
DetectedResultsLoop[,timestep] = HaveInfo*Invaded
# run simulation
for (timestep in 1:Ntimesteps) {
###If carrying capacity provided as matrix assign values for relevant timestep
if(is.matrix(K) == TRUE)
{
K_is_0 <- K[,timestep]<=0
inv_K <- 1 / sum(K[,timestep])
NodeK = K[,timestep]
}
###If rate of increase provided as matrix assign values for relevant timestep
if(is.matrix(R0) == TRUE)
NodeR0 = R0[,timestep]
###Randomly assign annual detection probability, based on mean and sd
###If DetectionProb given as matrix (nodes x timesteps)
if(is.matrix(DetectionProb)==TRUE && nrow(DetectionProb) == nrow(SDDprob) && ncol(DetectionProb) == Ntimesteps)
{
NodeDetectionProb = rnorm(DetectionProb[,timestep],DetectionSD,n = nrow(SDDprob))
NodeDetectionProb[NodeDetectionProb<0] = 0
NodeDetectionProb[NodeDetectionProb>1] = 1
}
###Randomly assign probability of mangement adoption upon detection of infestation
###If ManageProb given as matrix (nodes x timesteps)
if(is.matrix(ManageProb)==TRUE && nrow(ManageProb) == nrow(SDDprob) && ncol(ManageProb) == Ntimesteps)
{
NodeManageProb = rnorm(ManageProb[,timestep],ManageSD,n = nrow(SDDprob))
NodeManageProb[NodeManageProb<0] = 0
NodeManageProb[NodeManageProb>1] = 1
}
###Randomly assign spread reduction factor when management adopted
###If SpreadReduction given as matrix (nodes x timesteps)
if(is.matrix(SpreadReduction)==TRUE && nrow(SpreadReduction) == nrow(SDDprob) && ncol(SpreadReduction) == Ntimesteps)
{
NodeSpreadReduction = rnorm(SpreadReduction[,timestep],ManageSD,n = nrow(SDDprob))
NodeSpreadReduction[NodeSpreadReduction<0] = 0
NodeSpreadReduction[NodeSpreadReduction>1] = 1
}
###Randomly assign annual eradication probability when management applied
###If MortalityProb given as matrix (nodes x timesteps)
if(is.matrix(MortalityProb)==TRUE && nrow(MortalityProb) == nrow(SDDprob) && ncol(MortalityProb) == Ntimesteps)
{
NodeMortalityProb = rnorm(MortalityProb[,timestep],MortalitySD,n = nrow(SDDprob))
NodeMortalityProb[NodeMortalityProb<0] = 0
NodeMortalityProb[NodeMortalityProb>1] = 1
}
###Assign management status to nodes
###Management is only applied to nodes which have information
###i.e. where pest has been detected or following communication of information
###from neighbouring infested farms
Managing = rbinom(1:nrow(SDDprob),size = 1,prob = NodeManageProb*HaveInfo)
###Management is only applied to nodes which have information
###i.e. where pest has been detected or following communication of information
###from neighbouring infested farms
Managing = Managing*HaveInfo
###Identify nodes with known extant infestations
Detected = Invaded*HaveInfo
N0 = rbinom(nrow(SDDprob),N,(1-MortalityProb*Managing))
Pin <-0
Qin <- 0
# natural dispersal
if(sum(N0)>0 )
{
N <- LocalDynamicsLoop(sddprob = SDDprob, propaguleproduction = PropaguleProduction,nodeR0 = NodeR0,n=N0,
lddprob = LDDprob, lddrate = LDDrate,k_is_0 = K_is_0, nodeK = NodeK,propaguleestablishment = PropaguleEstablishment,
nodespreadreduction = NodeSpreadReduction,managing = Managing)
}
###Update info vector for any info spread (if SEAM supplied)
###Note once nodes obtain info they always have info (only zero values updated)
if(is.matrix(SEAM) == T)
{
RandSEAM[] <- rbinom(n=nrow(SDDprob)^2, size=1, prob = SEAM*Detected)
InfoTransferred = ifelse(colSums(RandSEAM)>0,1,0)
HaveInfo[HaveInfo == 0] = InfoTransferred[HaveInfo == 0]
}
###Add invasion resulting from colonisation from external sources
if(OngoingExternal == T)
{
if(is.matrix(InvasionRisk) == F)
ExternalInvasion = rbinom(1:nrow(SDDprob),size = 1,prob = InvasionRisk)
if(is.matrix(InvasionRisk) == T)
ExternalInvasion = rbinom(1:nrow(SDDprob),size = 1,prob = InvasionRisk[,timestep])
Invaded[Invaded == 0] = ExternalInvasion[Invaded==0]
if(is.na(IncursionStartPop) == T)
N = N+ExternalInvasion
if(is.na(IncursionStartPop) == F)
N = N+ExternalInvasion*IncursionStartPop
N[N > NodeK] = NodeK[N > NodeK]
}
###Update infestation vector
Invaded = ifelse(N>0,1,0)
###Record nodes adopting management
ManagingResultsLoop[,timestep] = Managing
###Record infested nodes
InvasionResultsLoop[,timestep] = Invaded
###Record populations
PopulationResultsLoop[,timestep] = N
###Select new nodes where infestation detected
NewHaveInfo =  rbinom(1:nrow(SDDprob),size = 1,prob = Invaded*NodeDetectionProb)
###Add newly detected infestations to info vector
###Note once nodes obtain info they always have info (only zero values updated)
HaveInfo[HaveInfo==0] = NewHaveInfo[HaveInfo==0]
###Record detection status
DetectedResultsLoop[,timestep] = HaveInfo*Invaded
}
abind(InvasionResults,PopulationResults,ManagingResultsLoop,DetectedResultsLoop,along = 3)
LocalDynamicsLoop = function(sddprob = SDDprob, propaguleproduction = PropaguleProduction,nodeR0 = NodeR0,n=N,
lddprob = LDDprob, lddrate = LDDrate,k_is_0 = K_is_0, nodeK = NodeK,propaguleestablishment = PropaguleEstablishment,
nodespreadreduction = NodeSpreadReduction,managing = Managing)
{
Propagules <- rpois(nrow(sddprob), propaguleproduction * nodeR0 * n)# propagules are produced
###self-mediated spread
Pout <- Propagules*(1-lddrate)
if(sum(Pout)>0 )
Pin <- t(rmultinom(1, size=sum(Pout*rowSums(sddprob)), prob=Pout %*% sddprob))  # propagules are dispersed
###human-mediated spread
if (is.matrix(lddprob)==T)
{
Qout  = Propagules*lddrate *(1-nodespreadreduction*managing)
if(sum(Qout)>0)
Qin <- t(rmultinom(1, size=sum(Qout*rowSums(lddprob)), prob=Qout %*% lddprob))    # propagules are dispersed
}
# propagule success depends on availability of uninfested host plants
Nout <- ifelse(k_is_0, 0, n + rbinom(nrow(sddprob), nodeK-n, 1 - exp(-propaguleestablishment*(Pin+Qin))))
return(Nout)
}
InvasionResultsLoop <- array(dim = c(nrow(SDDprob),Ntimesteps))
PopulationResultsLoop <- InvasionResultsLoop
ManagingResultsLoop <- InvasionResultsLoop
DetectedResultsLoop <- InvasionResultsLoop
###Assign initial infestations according either to "InitialInvasion" binary vector OR
###"InvasionRisk" probabilities and/or initial proportion of nodes infested ("InitBioP") OR
###just "InitBioP" if neither "InitialInvasion" or "InvasionRisk" supplied by user
InitBio = rep(0,times = nrow(SDDprob))
if(length(InitialPopulation) != nrow(SDDprob))
{
if(length(InvasionRisk) == nrow(SDDprob))
{
if(is.na(InitBioP) == F)
Infested = sample(1:nrow(SDDprob),size = ceiling(nrow(SDDprob)*InitBioP),prob = InvasionRisk)
if(is.na(InitBioP) == T)
{
Infested = rbinom(1:nrow(SDDprob),size = 1,prob = InvasionRisk)
Infested = which(Infested == 1)
}
}
if(length(InvasionRisk) != nrow(SDDprob))
{
if(is.matrix(InvasionRisk) == F)
Infested = sample(1:nrow(SDDprob),size = ceiling(nrow(SDDprob)*InitBioP))
if(is.matrix(InvasionRisk) == T)
{
Infested = rbinom(1:nrow(SDDprob),size = 1,prob = InvasionRisk[,1])
Infested = which(Infested == 1)
}
}
if(is.na(IncursionStartPop) == T)
InitBio[Infested] = 1
if(is.na(IncursionStartPop) == F)
InitBio[Infested] = IncursionStartPop
}
if(length(InitialPopulation) == nrow(SDDprob))
InitBio = InitialPopulation
###Randomly assign annual detection probability, based on mean and sd
###If DetectionProb given as single value or vector (nodes)
if(is.matrix(DetectionProb)==FALSE &&(length(DetectionProb) == 1 ||length(DetectionProb) == nrow(SDDprob) ))
{
NodeDetectionProb = rnorm(DetectionProb,DetectionSD,n = nrow(SDDprob))
NodeDetectionProb[NodeDetectionProb<0] = 0
NodeDetectionProb[NodeDetectionProb>1] = 1
}
###If DetectionProb given as matrix (nodes x timesteps) use values for first timestep to get initial detections
if(is.matrix(DetectionProb)==TRUE && nrow(DetectionProb) == nrow(SDDprob) && ncol(DetectionProb) == Ntimesteps)
{
NodeDetectionProb = rnorm(DetectionProb[,timestep],DetectionSD,n = nrow(SDDprob))
NodeDetectionProb[NodeDetectionProb<0] = 0
NodeDetectionProb[NodeDetectionProb>1] = 1
}
###Randomly assign probability of mangement adoption upon detection of infestation
###If ManageProb given as single value or vector (nodes)
if(is.matrix(ManageProb)==FALSE &&(length(ManageProb) == 1 ||length(ManageProb) == nrow(SDDprob) ))
{
NodeManageProb = rnorm(ManageProb,ManageSD,n = nrow(SDDprob))
NodeManageProb[NodeManageProb<0] = 0
NodeManageProb[NodeManageProb>1] = 1
}
###Randomly assign spread reduction factor when management adopted
###If SpreadReduction given as single value or vector (nodes)
if(is.matrix(SpreadReduction)==FALSE &&(length(SpreadReduction) == 1 ||length(SpreadReduction) == nrow(SDDprob) ))
{
NodeSpreadReduction = rnorm(SpreadReduction,ManageSD,n = nrow(SDDprob))
NodeSpreadReduction[NodeSpreadReduction<0] = 0
NodeSpreadReduction[NodeSpreadReduction>1] = 1
}
###Randomly assign mortality probability when management applied
###If MortalityProb given as single value or vector (nodes)
if(is.matrix(MortalityProb)==FALSE &&(length(MortalityProb) == 1 ||length(MortalityProb) == nrow(SDDprob) ))
{
NodeEradicationProb = rnorm(MortalityProb,MortalitySD,n = nrow(SDDprob))
NodeEradicationProb[NodeEradicationProb<0] = 0
NodeEradicationProb[NodeEradicationProb>1] = 1
}
###Populate invasion status vector ahead of timestep loop
Invaded = ifelse(InitBio>0,1,0)
###Probability of info at start of simulation depends on
###Presence of pest and detection probability
###Select nodes that have detected infestation
InitInfo = rbinom(1:nrow(SDDprob),size = 1,prob = Invaded*NodeDetectionProb)
###Populate information status vector ahead of timestep loop
HaveInfo = InitInfo
# initialise the population
N <- InitBio
