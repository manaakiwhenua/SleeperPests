End <- Sys.time()
Time <- End-Start
ModelName = paste0("CurrentClim_DetProb_OngoingExternalInv",DetectionProb)
if(DoClimateChange == TRUE)
ModelName = paste0("FutureClim_DetProb_OngoingExternalInv",DetectionProb)
OutputDir = paste0(ExternalInvasionDir,ModelName,"/")
dir.create(OutputDir)
Start <- Sys.time()
INApestMetaParallel(
ModelName = ModelName,
Nperm = Nperm,                  #Number of permutations per parameter combination
Ntimesteps = Ntimesteps,                 #Simulation duration
DetectionProb = DetectionProb,  #Annual detection probability or vector of probabilties per node (e.g. farm) (must be between 0 and 1)
ManageProb = 0.99,             #Annual Probability or vector of probabilities vector length nrow(SDDprob)of node adopting management upon detection
MortalityProb = 0.99,           #Annual mortality probability under management
SpreadReduction = 0.9,        #Reduction in dispersal probability when management adopted. Must be between 0 (no spread reduction) and 1 (complete prevention of spread). Can be single value or vector length nrow(SDDprob)
InitialPopulation = NA,        #Population size at start if simulations
InitBioP = NA,		#Proportion of nodes infested at start of simulations
InvasionRisk = PropTotalHumans*AnnualIncursionRate,  #Vector of probabilities of external invasion risk
ExternalInfoProb = NA, #
EnvEstabProb = 1,           #Environmentally determined establishment probability. Can be single value, vector (nodes) or matrix (nodes x timesteps)
Survival = 1,           # local population survival probability. Set to 1 for no environmental limitation on survival. Can be single number, vector (nodes) or matrix (nodes x timesteps)
K = K,		       #Population carrying capacity
PropaguleProduction = alpha*d$R0, #Propagules produced per individual
PropaguleEstablishment = estab, #Propagules establishment rate
IncursionStartPop=10,      #option to set population size for new incursions
SDDprob = nd,                   #Natural disperal probability between each pair of nodes
SEAM = 0,			#Option to provide socioeconomic adjacency matrix for information spread
LDDprob = hd,         #Option to provide long distance (human-mediated) dispersal matrix instead of distance-independent dispesal rate
#e.g. could be weighted by law of human visitation or data on stock movements
LDDrate = H_vectors,         #Proportion of available propagules entering LDD
OngoingExternalInvasion = T,   ##Option to include ongoing invasion from external sources
OngoingExternalInfo = F,   ##Option to include ongoing invasion from external sources
OutputDir = OutputDir,		      #Directory for storing results
DoPlots = TRUE	     #Option to omit printing of line graphs.Default is to print.
)
End <- Sys.time()
Time <- End-Start
################################
###Initial invasion as matrix of probabilities
###with ongoing external invasion
################################
ExternalInvProbMatrix = matrix(ncol = Ntimesteps, nrow  = nrow(d))
for(i in 1:20)
ExternalInvProbMatrix[,i] = PropTotalHumans*AnnualIncursionRate
for(i in 21:Ntimesteps)
ExternalInvProbMatrix[,i] = PropTotalHumans*AnnualIncursionRate*10
ModelName = paste0("CurrentClim_DetProb_ExternalInvMatrix",DetectionProb)
if(DoClimateChange == TRUE)
ModelName = paste0("FutureClim_DetProb_ExternalInvMatrix",DetectionProb)
OutputDir = paste0(ExternalInvasionDir,ModelName,"/")
dir.create(OutputDir)
Start <- Sys.time()
INApestMetaParallel(
ModelName = ModelName,
Nperm = Nperm,                  #Number of permutations per parameter combination
Ntimesteps = Ntimesteps,                 #Simulation duration
DetectionProb = DetectionProb,  #Annual detection probability or vector of probabilties per node (e.g. farm) (must be between 0 and 1)
ManageProb = 0.99,             #Annual Probability or vector of probabilities vector length nrow(SDDprob)of node adopting management upon detection
MortalityProb = 0.99,           #Annual mortality probability under management
SpreadReduction = 0.9,        #Reduction in dispersal probability when management adopted. Must be between 0 (no spread reduction) and 1 (complete prevention of spread). Can be single value or vector length nrow(SDDprob)
InitialPopulation = NA,        #Population size at start if simulations
InitBioP = NA,		#Proportion of nodes infested at start of simulations
InvasionRisk = ExternalInvProbMatrix,  #Vector of probabilities of external invasion risk
ExternalInfoProb = NA, #
EnvEstabProb = 1,           #Environmentally determined establishment probability. Can be single value, vector (nodes) or matrix (nodes x timesteps)
Survival = 1,           # local population survival probability. Set to 1 for no environmental limitation on survival. Can be single number, vector (nodes) or matrix (nodes x timesteps)
K = K,		       #Population carrying capacity
PropaguleProduction = alpha*d$R0, #Propagules produced per individual
PropaguleEstablishment = estab, #Propagules establishment rate
IncursionStartPop=10,      #option to set population size for new incursions
SDDprob = nd,                   #Natural disperal probability between each pair of nodes
SEAM = 0,			#Option to provide socioeconomic adjacency matrix for information spread
LDDprob = hd,         #Option to provide long distance (human-mediated) dispersal matrix instead of distance-independent dispesal rate
#e.g. could be weighted by law of human visitation or data on stock movements
LDDrate = H_vectors,         #Proportion of available propagules entering LDD
OngoingExternalInvasion = T,   ##Option to include ongoing invasion from external sources
OngoingExternalInfo = F,   ##Option to include ongoing invasion from external sources
OutputDir = OutputDir,		      #Directory for storing results
DoPlots = TRUE	     #Option to omit printing of line graphs.Default is to print.
)
End <- Sys.time()
Time <- End-Start
Nperm = 30
Ntimesteps = 50
############################################################################
###Provide K as matrix of nodes x land uses
###Just use artificial example to test new functionality
############################################################################
Planduses = c(0.5,0.5)
Klanduse = matrix(nrow = length(K),ncol = 2)
Klanduse[,1] = floor(K*Planduses[1])
Klanduse[,2] = ceiling(K*Planduses[2])
N0landuse  = cbind(floor(d$N0*Planduses[1]),ceiling(d$N0*Planduses[2]))
ModelName = "MultipleLandUseZeroManParallel"
OutputDir = paste0(ResultsDir,ModelName,"/")
dir.create(OutputDir)
Start <- Sys.time()
set.seed(42)
INApestMetaParallelMultipleLandUse(
ModelName = ModelName,
Nperm = Nperm,                  #Number of permutations per parameter combination
Ntimesteps = Ntimesteps,                 #Simulation duration
Nlanduses = 2,
DetectionProb = c(0,0),  #Annual per-individual detection Probability or vector of probabilities vector length nrow(SDDprob)of node adopting management upon detection
ManageProb = c(0.5,0.99),             #Annual Probability or vector of probabilities vector length nrow(SDDprob)of node adopting management upon detection
MortalityProb = c(0.5,0.99),           #Annual mortality probability under management
SpreadReduction = c(0,0.9),        #Reduction in dispersal probability when management adopted. Must be between 0 (no spread reduction) and 1 (complete prevention of spread). Can be single value or vector length nrow(SDDprob)
InitialPopulation = N0landuse,        #Population size at start if simulations
InitBioP = NA,		#Proportion of nodes infested at start of simulations
#InvasionRisk = PropTotalHumans*AnnualIncursionRate,  #Vector of probabilities of external invasion risk
#InitialInfo = sample(1:nrow(d),10),
EnvEstabProb = 1,           #Environmentally determined establishment probability. Can be single value, vector (nodes) or matrix (nodes x timesteps)
Survival = 1,           # local population survival probability. Set to 1 for no environmental limitation on survival. Can be single number, vector (nodes) or matrix (nodes x timesteps)
K = Klanduse,		       #Population carrying capacity
PropaguleProduction = alpha*d$R0, #Propagules produced per individual
PropaguleEstablishment = estab, #Propagules establishment rate
IncursionStartPop=10,      #option to set population size for new incursions
SDDprob = nd,                   #Natural disperal probability between each pair of nodes
SEAM = 0,			#Option to provide socioeconomic adjacency matrix for information spread
LDDprob = hd,         #Option to provide long distance (human-mediated) dispersal matrix instead of distance-independent dispesal rate
#e.g. could be weighted by law of human visitation or data on stock movements
LDDrate = H_vectors,         #Proportion of available propagules entering LDD
OngoingExternalInvasion = F,   ##Option to include ongoing invasion from external sources
OutputDir = OutputDir,		      #Directory for storing results
DoPlots = TRUE	     #Option to omit printing of line graphs.Default is to print.
)
End <- Sys.time()
ParallelTime <- End-Start
ModelName = "MultipleLandUseDet_0.5_Parallel"
OutputDir = paste0(ResultsDir,ModelName,"/")
dir.create(OutputDir)
Start <- Sys.time()
set.seed(42)
INApestMetaParallelMultipleLandUse(
ModelName = ModelName,
Nperm = Nperm,                  #Number of permutations per parameter combination
Ntimesteps = Ntimesteps,                 #Simulation duration
Nlanduses = 2,
DetectionProb = c(0.5,0.5),  #Annual per-individual detection Probability or vector of probabilities vector length nrow(SDDprob)of node adopting management upon detection
ManageProb = c(0.5,0.99),             #Annual Probability or vector of probabilities vector length nrow(SDDprob)of node adopting management upon detection
MortalityProb = c(0.5,0.99),           #Annual mortality probability under management
SpreadReduction = c(0,0.9),        #Reduction in dispersal probability when management adopted. Must be between 0 (no spread reduction) and 1 (complete prevention of spread). Can be single value or vector length nrow(SDDprob)
InitialPopulation = N0landuse,        #Population size at start if simulations
InitBioP = NA,		#Proportion of nodes infested at start of simulations
#InvasionRisk = PropTotalHumans*AnnualIncursionRate,  #Vector of probabilities of external invasion risk
#InitialInfo = sample(1:nrow(d),10),
EnvEstabProb = 1,           #Environmentally determined establishment probability. Can be single value, vector (nodes) or matrix (nodes x timesteps)
Survival = 1,           # local population survival probability. Set to 1 for no environmental limitation on survival. Can be single number, vector (nodes) or matrix (nodes x timesteps)
K = Klanduse,		       #Population carrying capacity
PropaguleProduction = alpha*d$R0, #Propagules produced per individual
PropaguleEstablishment = estab, #Propagules establishment rate
IncursionStartPop=10,      #option to set population size for new incursions
SDDprob = nd,                   #Natural disperal probability between each pair of nodes
SEAM = 0,			#Option to provide socioeconomic adjacency matrix for information spread
LDDprob = hd,         #Option to provide long distance (human-mediated) dispersal matrix instead of distance-independent dispesal rate
#e.g. could be weighted by law of human visitation or data on stock movements
LDDrate = H_vectors,         #Proportion of available propagules entering LDD
OngoingExternalInvasion = F,   ##Option to include ongoing invasion from external sources
OutputDir = OutputDir,		      #Directory for storing results
DoPlots = TRUE	     #Option to omit printing of line graphs.Default is to print.
)
End <- Sys.time()
ParallelTime <- End-Start
K = Klanduse
K
Klanduse[118,1] = 10
N0landuse
Klanduse = matrix(nrow = length(K),ncol = 2)
Klanduse[,1] = floor(K*Planduses[1])
Klanduse[,2] = ceiling(K*Planduses[2])
N0landuse  = cbind(floor(d$N0*Planduses[1]),ceiling(d$N0*Planduses[2]))
Klanduse[118,1] = 0
N0landuse[118,] = 10
Klanduse[118,1]
N0landuse[118,]
InitialPopulation = N0landuse
K = Klanduse
K_is_0 <- rowSums(K)<=0
inv_K <- 1 / sum(colSums(K))
NodeK = K
Pk  = K/rowSums(K)
Pk[is.na(Pk)] = 0
NodeK
Klanduse[118,1] = 10
N0landuse[118,] = 10
K = Klanduse
K_is_0 <- rowSums(K)<=0
inv_K <- 1 / sum(colSums(K))
NodeK = K
Pk  = K/rowSums(K)
Pk[is.na(Pk)] = 0
NodeK
###Assign initial infestations according either to "InitialInvasion" binary vector OR
###"InvasionRisk" probabilities and/or initial proportion of nodes infested ("InitBioP") OR
###just "InitBioP" if neither "InitialInvasion" or "InvasionRisk" supplied by user
InitBio = matrix(ncol = Nlanduses, nrow = nrow(SDDprob))
InitBio[,] = 0
Nlanduses=2
###Assign initial infestations according either to "InitialInvasion" binary vector OR
###"InvasionRisk" probabilities and/or initial proportion of nodes infested ("InitBioP") OR
###just "InitBioP" if neither "InitialInvasion" or "InvasionRisk" supplied by user
InitBio = matrix(ncol = Nlanduses, nrow = nrow(SDDprob))
InitBio[,] = 0
InintInfested = rep(0,times = nrow(SDDprob))
InitBio = InitialPopulation
InitBio
###Ensure initial population not greater than carrying capacity
InitBio[InitBio > NodeK] = NodeK[InitBio > NodeK]
InitBio[[InitBio > NodeK]]
InitBio
NodeK
###Ensure initial population not greater than carrying capacity
for(i in 1:Nlanduses)
InitBio[InitBio[,i] > NodeK[,i],i] = NodeK[InitBio[,i] > NodeK[,i],i]
InitBio
InitBio[,i]
NodeK[,i]
InitBio[,i]
InitBio[InitBio[,i] > NodeK[,i],i]
InitBio
i
InitBio[InitBio[,i] > NodeK[,i],i]
InitBio[,i]
InitBio[,i][InitBio[,i] > NodeK[,i]]
InitBio[,i] > NodeK[,i]
InitBio[InitBio[,i] > NodeK[,i],i]
InitBio[InitBio[,i] > NodeK[,i]== T,i]
Exclude <- InitBio[,i] > NodeK[,i]
Exclude
InitBio[Exclude== T,i]
Exclude== T
InitBio
InitBio[,i]
min(NodeK[,i], InitBio[,i])
apply(cbind(NodeK[,i], InitBio[,i]),1,min)
###Ensure initial population not greater than carrying capacity
for(i in 1:Nlanduses)
InitBio[,i] = apply(cbind(NodeK[,i], InitBio[,i]),1,min)
apply(cbind(NodeK[,i], InitBio[,i]),1,min)
InitBio[,i]
apply(cbind(NodeK[,i], InitBio[,i]),1,min)
apply(cbind(NodeK[,i], InitBio[,i]),2,min)
InitBio[,i] = apply(cbind(NodeK[,i], InitBio[,i]),1,min)
apply(cbind(NodeK[,i], InitBio[,i]),1,min)
cbind(NodeK[,i], InitBio[,i])
apply(cbind(NodeK[,i], InitBio[,i]),margin = 1,FUN = min)
InitBio[,i] = apply(cbind(NodeK[,i], InitBio[,i]),MARGIN = 1,FUN = min)
apply(cbind(NodeK[,i], InitBio[,i]),MARGIN = 1,FUN = min)
?apply
NodeK[,i]
length(dim(K))
K_is_0 <- rowSums(K)<=0
inv_K <- 1 / sum(colSums(K))
NodeK = K
NodeK
dim(K)
############################################################################
###Provide K as matrix of nodes x land uses
###Just use artificial example to test new functionality
############################################################################
Planduses = c(0.5,0.5)
length(K)
source("dataprepsmall.r")
############################################################################
###Provide K as matrix of nodes x land uses
###Just use artificial example to test new functionality
############################################################################
Planduses = c(0.5,0.5)
Klanduse = matrix(nrow = length(K),ncol = 2)
Klanduse[,1] = floor(K*Planduses[1])
Klanduse[,2] = ceiling(K*Planduses[2])
N0landuse  = cbind(floor(d$N0*Planduses[1]),ceiling(d$N0*Planduses[2]))
Klanduse[118,1] = 10
N0landuse[118,] = 10
Klanduse
INApestMetaMultipleLandUse(
ModelName = ModelName,
Nperm = Nperm,                  #Number of permutations per parameter combination
Ntimesteps = Ntimesteps,                 #Simulation duration
Nlanduses = 2,
DetectionProb = c(0,0),  #Annual per-individual detection Probability or vector of probabilities vector length nrow(SDDprob)of node adopting management upon detection
ManageProb = c(0.5,0.99),             #Annual Probability or vector of probabilities vector length nrow(SDDprob)of node adopting management upon detection
MortalityProb = c(0.5,0.99),           #Annual mortality probability under management
SpreadReduction = c(0,0.9),        #Reduction in dispersal probability when management adopted. Must be between 0 (no spread reduction) and 1 (complete prevention of spread). Can be single value or vector length nrow(SDDprob)
InitialPopulation = N0landuse,        #Population size at start if simulations
InitBioP = NA,		#Proportion of nodes infested at start of simulations
#InvasionRisk = PropTotalHumans*AnnualIncursionRate,  #Vector of probabilities of external invasion risk
#InitialInfo = sample(1:nrow(d),10),
EnvEstabProb = 1,           #Environmentally determined establishment probability. Can be single value, vector (nodes) or matrix (nodes x timesteps)
Survival = 1,           # local population survival probability. Set to 1 for no environmental limitation on survival. Can be single number, vector (nodes) or matrix (nodes x timesteps)
K = Klanduse,		       #Population carrying capacity
PropaguleProduction = alpha*d$R0, #Propagules produced per individual
PropaguleEstablishment = estab, #Propagules establishment rate
IncursionStartPop=10,      #option to set population size for new incursions
SDDprob = nd,                   #Natural disperal probability between each pair of nodes
SEAM = 0,			#Option to provide socioeconomic adjacency matrix for information spread
LDDprob = hd,         #Option to provide long distance (human-mediated) dispersal matrix instead of distance-independent dispesal rate
#e.g. could be weighted by law of human visitation or data on stock movements
LDDrate = H_vectors,         #Proportion of available propagules entering LDD
OngoingExternalInvasion = F,   ##Option to include ongoing invasion from external sources
OutputDir = OutputDir,		      #Directory for storing results
DoPlots = TRUE	     #Option to omit printing of line graphs.Default is to print.
)
Nlanduses = 2
############################################################################
###Provide K as matrix of nodes x land uses
###Just use artificial example to test new functionality
############################################################################
Planduses = c(0.5,0.5)
Klanduse = matrix(nrow = length(K),ncol = 2)
Klanduse[,1] = floor(K*Planduses[1])
Klanduse[,2] = ceiling(K*Planduses[2])
N0landuse  = cbind(floor(d$N0*Planduses[1]),ceiling(d$N0*Planduses[2]))
Klanduse[118,1] = 10
N0landuse[118,] = 10
dim(K)
K = Klanduse
dim(K)
if(length(dim(K)) <3)
{
K_is_0 <- rowSums(K)<=0
inv_K <- 1 / sum(colSums(K))
NodeK = K
Pk  = K/rowSums(K)
Pk[is.na(Pk)] = 0
}
InitBio
###Ensure initial population not greater than carrying capacity
for(i in 1:Nlanduses)
InitBio[,i] = apply(cbind(NodeK[,i], InitBio[,i]),MARGIN = 1,FUN = min)
InitBio
Nperm = 10
Ntimesteps = 10
source(paste0(CoreFunctionDir,"INApestMeta.r"))
source(paste0(CoreFunctionDir,"INApestMetaParallel.r"))
source(paste0(CoreFunctionDir,"INApestMetaMultipleLandUse.r"))
source(paste0(CoreFunctionDir,"INApestMetaParallelMultipleLandUse.r"))
Nperm = 10
Ntimesteps = 10
Nperm = 10
Ntimesteps = 10
############################################################################
###Provide K as matrix of nodes x land uses
###Just use artificial example to test new functionality
############################################################################
Planduses = c(0.5,0.5)
Klanduse = matrix(nrow = length(K),ncol = 2)
Klanduse[,1] = floor(K*Planduses[1])
Klanduse[,2] = ceiling(K*Planduses[2])
N0landuse  = cbind(floor(d$N0*Planduses[1]),ceiling(d$N0*Planduses[2]))
#Klanduse[118,1] = 10
#N0landuse[118,] = 10
###########################################################
###Serial function
###########################################################
ModelName = "MultipleLandUseZeroMan"
OutputDir = paste0(ResultsDir,ModelName,"/")
dir.create(OutputDir)
Start <- Sys.time()
set.seed(42)
INApestMetaMultipleLandUse(
ModelName = ModelName,
Nperm = Nperm,                  #Number of permutations per parameter combination
Ntimesteps = Ntimesteps,                 #Simulation duration
Nlanduses = 2,
DetectionProb = c(0,0),  #Annual per-individual detection Probability or vector of probabilities vector length nrow(SDDprob)of node adopting management upon detection
ManageProb = c(0.5,0.99),             #Annual Probability or vector of probabilities vector length nrow(SDDprob)of node adopting management upon detection
MortalityProb = c(0.5,0.99),           #Annual mortality probability under management
SpreadReduction = c(0,0.9),        #Reduction in dispersal probability when management adopted. Must be between 0 (no spread reduction) and 1 (complete prevention of spread). Can be single value or vector length nrow(SDDprob)
InitialPopulation = N0landuse,        #Population size at start if simulations
InitBioP = NA,		#Proportion of nodes infested at start of simulations
#InvasionRisk = PropTotalHumans*AnnualIncursionRate,  #Vector of probabilities of external invasion risk
#InitialInfo = sample(1:nrow(d),10),
EnvEstabProb = 1,           #Environmentally determined establishment probability. Can be single value, vector (nodes) or matrix (nodes x timesteps)
Survival = 1,           # local population survival probability. Set to 1 for no environmental limitation on survival. Can be single number, vector (nodes) or matrix (nodes x timesteps)
K = Klanduse,		       #Population carrying capacity
PropaguleProduction = alpha*d$R0, #Propagules produced per individual
PropaguleEstablishment = estab, #Propagules establishment rate
IncursionStartPop=10,      #option to set population size for new incursions
SDDprob = nd,                   #Natural disperal probability between each pair of nodes
SEAM = 0,			#Option to provide socioeconomic adjacency matrix for information spread
LDDprob = hd,         #Option to provide long distance (human-mediated) dispersal matrix instead of distance-independent dispesal rate
#e.g. could be weighted by law of human visitation or data on stock movements
LDDrate = H_vectors,         #Proportion of available propagules entering LDD
OngoingExternalInvasion = F,   ##Option to include ongoing invasion from external sources
OutputDir = OutputDir,		      #Directory for storing results
DoPlots = TRUE	     #Option to omit printing of line graphs.Default is to print.
)
NodeK
###Ensure initial population not greater than carrying capacity
for(i in 1:Nlanduses)
InitBio[,i] = apply(cbind(NodeK[,i], InitBio[,i]),MARGIN = 1,FUN = min)
N0landuse
sum(N0landuse)
INApestMetaParallelMultipleLandUse(
ModelName = ModelName,
Nperm = Nperm,                  #Number of permutations per parameter combination
Ntimesteps = Ntimesteps,                 #Simulation duration
Nlanduses = 2,
DetectionProb = c(0.5,0.5),  #Annual per-individual detection Probability or vector of probabilities vector length nrow(SDDprob)of node adopting management upon detection
ManageProb = c(0.5,0.99),             #Annual Probability or vector of probabilities vector length nrow(SDDprob)of node adopting management upon detection
MortalityProb = c(0.5,0.99),           #Annual mortality probability under management
SpreadReduction = c(0,0.9),        #Reduction in dispersal probability when management adopted. Must be between 0 (no spread reduction) and 1 (complete prevention of spread). Can be single value or vector length nrow(SDDprob)
InitialPopulation = N0landuse,        #Population size at start if simulations
InitBioP = NA,		#Proportion of nodes infested at start of simulations
#InvasionRisk = PropTotalHumans*AnnualIncursionRate,  #Vector of probabilities of external invasion risk
#InitialInfo = sample(1:nrow(d),10),
EnvEstabProb = 1,           #Environmentally determined establishment probability. Can be single value, vector (nodes) or matrix (nodes x timesteps)
Survival = 1,           # local population survival probability. Set to 1 for no environmental limitation on survival. Can be single number, vector (nodes) or matrix (nodes x timesteps)
K = Klanduse,		       #Population carrying capacity
PropaguleProduction = alpha*d$R0, #Propagules produced per individual
PropaguleEstablishment = estab, #Propagules establishment rate
IncursionStartPop=10,      #option to set population size for new incursions
SDDprob = nd,                   #Natural disperal probability between each pair of nodes
SEAM = 0,			#Option to provide socioeconomic adjacency matrix for information spread
LDDprob = hd,         #Option to provide long distance (human-mediated) dispersal matrix instead of distance-independent dispesal rate
#e.g. could be weighted by law of human visitation or data on stock movements
LDDrate = H_vectors,         #Proportion of available propagules entering LDD
OngoingExternalInvasion = F,   ##Option to include ongoing invasion from external sources
OutputDir = OutputDir,		      #Directory for storing results
DoPlots = TRUE	     #Option to omit printing of line graphs.Default is to print.
)
InitialPopulation = N0landuse
K = Klanduse
Klanduse
############################################################################
###Provide K as matrix of nodes x land uses
###Just use artificial example to test new functionality
############################################################################
Planduses = c(0.5,0.5)
DoClimateChange=F
DoHumanSpread = T
source("dataprepsmall.r")
###Test that serial and parallel multiple land use functions give similar results
source("MultipleLandUseUnitTesting.R")
###Test external info functionality
source("ExternalInvasion Test May2025.r")
DoClimateChange= T
DoHumanSpread = T
source("dataprepsmall.r")
###Test external info functionality
source("ExternalInvasion Test May2025.r")
warnings()
DoClimateChange=F
DoHumanSpread = T
source("dataprepsmall.r")
###Test external info functionality
source("ExternalInvasion Test May2025.r")
###Test that serial and parallel multiple land use functions give similar results
source("MultipleLandUseUnitTesting.R")
DoClimateChange= T
DoHumanSpread = T
################################
###Detection prob 0.1 no external invasion
################################
InitialPop = rep(0,times = nrow(d))
Sample <- sample(1:nrow(d),10)
InitialPop[Sample] = 10
InitialPop
rm(list = ls())
# set working directory
setwd(r"[C:\Users\MasonN\OneDrive - MWLR\Documents\GitHub\SleeperPests\Tomato red spider mite]")
#install.packages("gnorm")
CoreFunctionDir <- r"[C:\Users\MasonN\OneDrive - MWLR\Documents\GitHub\SleeperPests\INApest INApestMeta core function code\]"
source(paste0(CoreFunctionDir,"INApestMeta.r"))
source(paste0(CoreFunctionDir,"INApestMetaParallel.r"))
source(paste0(CoreFunctionDir,"INApestMetaMultipleLandUse.r"))
source(paste0(CoreFunctionDir,"INApestMetaParallelMultipleLandUse.r"))
ResultsDir = "UnitTestngMay2025/"
dir.create(ResultsDir, showWarnings = F)
DoClimateChange=F
DoHumanSpread = T
source("dataprepsmall.r")
###Test info functionality
source("ExternalInfo Test May2025.r")
DoClimateChange= T
DoHumanSpread = T
DoClimateChange=F
DoHumanSpread = T
source("dataprepsmall.r")
###Test info functionality
source("ExternalInfo Test May2025.r")
###Test invasion functionality
source("ExternalInvasion Test May2025.r")
warnings()
################################
###Initial invasion as binary vector
################################
InitialPopBinary[InitialPop>0] = 1
DoClimateChange=F
DoHumanSpread = T
source("dataprepsmall.r")
###Test invasion functionality
source("ExternalInvasion Test May2025.r")
DoClimateChange= T
DoHumanSpread = T
source("dataprepsmall.r")
###Test info functionality
source("ExternalInfo Test May2025.r")
###Test invasion functionality
source("ExternalInvasion Test May2025.r")
DoClimateChange=F
DoHumanSpread = T
source("dataprepsmall.r")
###Test invasion functionality
source("ExternalInvasion Test May2025.r")
DoClimateChange= T
DoHumanSpread = T
source("dataprepsmall.r")
###Test invasion functionality
source("ExternalInvasion Test May2025.r")
